(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{389:function(t,a,s){"use strict";s.r(a);var n=s(14),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"til-20210726"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#til-20210726"}},[t._v("#")]),t._v(" TIL-20210726")]),t._v(" "),a("h2",{attrs:{id:"today"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#today"}},[t._v("#")]),t._v(" Today")]),t._v(" "),a("ul",[a("li",[t._v("알고리즘")])]),t._v(" "),a("h2",{attrs:{id:"content"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#content"}},[t._v("#")]),t._v(" Content")]),t._v(" "),a("p",[t._v("프로그래머스 코딩테스트 연습 "),a("code",[t._v("가장 큰 사각형 찾기")]),t._v(" 문제를 풀려고 시도 했으나,\n효율성 부분에서 불합격을 받았다.")]),t._v(" "),a("p",[t._v("2차원 배열을 전부 순회하며 조사하는 방식을 택했는데, 최대 계산 횟수는 1억번 정도로 예측했다. (O(n^2))")]),t._v(" "),a("p",[t._v("그래서, 전체 좌표를 조사하는것도 가능한 방법일 것 같았는데, 전체가 가장 큰 사각형인 경우에는 1억번이 넘는 계산을 하기 때문에, 효율성을 실패한 것 같다.")]),t._v(" "),a("p",[t._v("실제로 조사한 좌표를 어떻게 처리할 것인가를 조금더 고민해 봐야 할 것 같다.")]),t._v(" "),a("p",[t._v("그리고 테스트 케이스 6번도 성공하지 못했다.")])])}),[],!1,null,null,null);a.default=r.exports}}]);