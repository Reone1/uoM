(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{343:function(t,a,s){"use strict";s.r(a);var e=s(14),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"rabbit-mq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rabbit-mq"}},[t._v("#")]),t._v(" Rabbit MQ")]),t._v(" "),a("h2",{attrs:{id:"mq는-어떤-역할을-하는가"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mq는-어떤-역할을-하는가"}},[t._v("#")]),t._v(" MQ는 어떤 역할을 하는가?")]),t._v(" "),a("p",[t._v("MQ(Message Queue)의 약어로 메시지(message) 데이터를 Queueing해서 시스템에 전달하는 역할을 합니다.\nMessage는 다양한 역할로 사용할 수 있는데, 이벤트 트리거, 로그 등 원하는 역할의 메세지를 만들어 큐에 담을 수 있습니다.\n간단하게 생각하면 커스텀 큐처럼 사용할 수 있습니다.")]),t._v(" "),a("h2",{attrs:{id:"rabbitmq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq"}},[t._v("#")]),t._v(" RabbitMQ?")]),t._v(" "),a("p",[t._v("Message Queue중 쉽게 사용할 수 있는 framework중 하나로, pub-sub 형식의 메시지 전달 방식을 가지고 있습니다.")])])}),[],!1,null,null,null);a.default=r.exports}}]);