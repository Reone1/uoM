(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{283:function(t,a,e){t.exports=e.p+"assets/img/gitflow.dff6508c.jpeg"},284:function(t,a,e){t.exports=e.p+"assets/img/manybranch.347012ad.png"},285:function(t,a,e){t.exports=e.p+"assets/img/rebase.a0453f0a.png"},331:function(t,a,e){"use strict";e.r(a);var s=e(14),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"우리는-git-flow를-어떻게-적용하였는가"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#우리는-git-flow를-어떻게-적용하였는가"}},[t._v("#")]),t._v(" 우리는 git-flow를 어떻게 적용하였는가?")]),t._v(" "),a("blockquote",[a("p",[t._v("이 글은 "),a("code",[t._v("우아한형제들")]),t._v(" 기술 블로그의 내용을 포함하고 있습니다. 해당 글을 통해 저희팀의 git-flow 관리 전략을 정했고 사용한 경험을 작성했습니다.")])]),t._v(" "),a("p",[t._v("📚 Ref ➡️ "),a("a",{attrs:{href:"https://techblog.woowahan.com/2553/",target:"_blank",rel:"noopener noreferrer"}},[t._v("우아한 형제들 기술 블로그 - 우리는 git-flow를 사용하고 있어요"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"git-flow는-어떤-의미-일까요"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-flow는-어떤-의미-일까요"}},[t._v("#")]),t._v(" git-flow는 어떤 의미 일까요 ❓")]),t._v(" "),a("p",[t._v("git-flow는 배포, 개발, QA를 효과적으로 관리하기 위한 git 관리 전략중 하나입니다.")]),t._v(" "),a("p",[t._v("git-flow는 다음과 같은 diagram을 통해서 표현할 수 있습니다.")]),t._v(" "),a("p",[a("img",{attrs:{src:e(283),alt:"git-flow"}}),t._v(" "),a("em",[t._v("Branch Management Strategy")])]),t._v(" "),a("p",[t._v("위와 같은 방식의 다중 브랜치를 통해서 현재 작업물의 상태를 어느정도 카테고리 형식으로 나눌 수 있습니다.")]),t._v(" "),a("p",[t._v("또한, fored repository에서 "),a("code",[t._v("feature branch")]),t._v("를 통해 개인단위의 작업이 가능합니다.")]),t._v(" "),a("p",[t._v("저희 팀은,"),a("br"),t._v(" "),a("code",[t._v("git-flow")]),t._v("에서 core concept라고 생각하는,")]),t._v(" "),a("p",[a("code",[t._v("master")]),t._v(", "),a("code",[t._v("release")]),t._v(", "),a("code",[t._v("dev")]),t._v(", "),a("code",[t._v("feature")]),a("br"),t._v("\n네 가지 브랜치를 이용해 git을 관리하기로 정하였습니다.")]),t._v(" "),a("h2",{attrs:{id:"git-convetion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-convetion"}},[t._v("#")]),t._v(" Git Convetion")]),t._v(" "),a("p",[t._v("조금만 사용해 보면,\n브랜치를 나누는 것은 어려운일이 아닙니다.")]),t._v(" "),a("p",[a("code",[t._v("branch")]),t._v("를 어떻게 나누고 사용하는지는 팀에서 정하기 나름이기 때문에,"),a("br"),t._v("\n저희가 어떻게 진행하는지만 간단한 상황 설명을 통해 말씀드리겠습니다.")]),t._v(" "),a("h3",{attrs:{id:"기본적인-작업-방식"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#기본적인-작업-방식"}},[t._v("#")]),t._v(" 기본적인 작업 방식")]),t._v(" "),a("ul",[a("li",[t._v("repository\n"),a("ul",[a("li",[t._v("upstream : 공용 repository")]),t._v(" "),a("li",[t._v("origin : 개인 repository, forked repository")])])]),t._v(" "),a("li",[t._v("branch\n"),a("ul",[a("li",[t._v("master: main branch (release version)")]),t._v(" "),a("li",[t._v("dev: develope branch")]),t._v(" "),a("li",[t._v("feature: 추가하는 feature와 관련된 branch")])])])]),t._v(" "),a("p",[t._v("새로운 feature를 위한 branch는 "),a("code",[t._v("feature/CardName")]),t._v("의 방식으로 생성했습니다."),a("br"),t._v(" "),a("code",[t._v("CardName")]),t._v("은 notion을 통해 관리하는 task Card의 "),a("code",[t._v("title")]),t._v("을 사용했습니다.")]),t._v(" "),a("p",[t._v("초기 상태의 repository는 통합으로 관리하는 upstream에서 받아올 수 있으며,"),a("br"),t._v("\n해당 repository를 fork해서 사용합니다.")]),t._v(" "),a("p",[t._v("fork해온 개인 remote repository를 origin으로 설정하여 사용합니다.")]),t._v(" "),a("p",[t._v("현재 project repository에는 기본적으로 두 개의 branch가 생성되어 있습니다. "),a("code",[t._v("master")]),t._v(", "),a("code",[t._v("dev")]),t._v("가 생성되어 있으며, 새로운 feature를 생성하기 위해서는 "),a("code",[t._v("dev")]),t._v("에서 새로운 "),a("code",[t._v("branch")]),t._v("를 생성합니다.")]),t._v(" "),a("p",[a("code",[t._v("doSomething")]),t._v(" 이라는 새로운 기능을 만든다고 가정하면\n다음 과정으로 브랜치를 생성하고 작업을 진행합니다.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("먼저 현재 작업상태를 upstream에서 pull로 당겨 옵니다.")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull upstream dev\n")])])])]),t._v(" "),a("li",[a("strong",[t._v("pull이 정상적으로 진행 되었다면, 새로운 브랜치로 분기 합니다.")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-b")]),t._v(" feature/dosomething\n")])])])]),t._v(" "),a("li",[a("strong",[t._v("나만의 작업 및 commit을 생성합니다.")]),t._v(" 😉"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 내가 작업한 작고 귀여운 무언가")]),t._v("\n$ git add "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("something"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("special"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("my"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("works\n$ git commit\n")])])])]),t._v(" "),a("li",[a("strong",[t._v("작업한 내용을 origin에 push합니다.")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin feature/dosomething\n")])])])]),t._v(" "),a("li",[a("strong",[t._v("PR을 통해 작업한 내용을 upstream에 반영합니다.")])])]),t._v(" "),a("p",[t._v("이런 식의 관리전략이 기본으로 진행됩니다.")]),t._v(" "),a("p",[t._v("다만, 해당 방식은 작업의 순서나 브랜치를 확인하기 어려워 집니다.")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("이처럼 복잡한 형태의 브랜치 얽힘이 발생합니다.")])])]),t._v(" "),a("p",[a("img",{attrs:{src:e(284),alt:"manybranch",title:"그냥 봐도 복잡한 이미지"}})]),t._v(" "),a("p",[t._v("다소 극단적인 모형이지만, feature에서 작업한다는 기본 규칙만 따를 때 발생할 수 있는 모형입니다.")]),t._v(" "),a("p",[t._v("이러한 문제를 해결하여,"),a("br"),t._v("\ngit log를 깔끔하게 하기 위한 rebase전략을 추가해서 사용합니다.")]),t._v(" "),a("p",[a("code",[t._v("rebase")]),t._v("는 "),a("code",[t._v("branch")]),t._v("의 분기 지점을 변경하는 행위라고 생각할 수 있습니다."),a("br"),t._v("\n추가적인 기능으로는 "),a("code",[t._v("commit")]),t._v("을 합치는 거나 변경하는 기능도 가능합니다.")]),t._v(" "),a("blockquote",[a("p",[t._v("rebase는 사용하는데 주의해야 합니다."),a("br"),t._v("\n복수의 작업자가 rebase를 실시하는 경우, coflict가 발생 할수 있습니다."),a("br"),t._v("\nrebase를 사용함에 있어서 공동 작업자와 협의를 하여 사용하는게 중요 합니다.")])]),t._v(" "),a("p",[t._v("항상 최신 merge상태를 rebase로 하여 PR을 신청하는 방식으로 관리하게 된다면 다음과 같이 commit log를 변경할 수 있습니다.")]),t._v(" "),a("p",[a("img",{attrs:{src:e(285),alt:"rebase"}})]),t._v(" "),a("h3",{attrs:{id:"rebase를-통한-git-log-관리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase를-통한-git-log-관리"}},[t._v("#")]),t._v(" rebase를 통한 git log 관리")]),t._v(" "),a("p",[t._v("git log를 위의 그림처럼 쉽게 변경하기 위한 방법입니다.")]),t._v(" "),a("p",[t._v("PR을 통한 merge가 이뤄지면, 이후 PR이 이뤄지는 작업물의 base를 dev로 다시 변경합니다.\nbase가 최신 commit으로 변경되고 이후 PR은 merge를 진행합니다.")]),t._v(" "),a("p",[t._v("위와 같은 방식을 반복적으로 적용하면 깔끔한 git log를 관리할 수 있습니다.\n각 단계를 세분화하여 알아보면,")]),t._v(" "),a("p",[t._v("merge 이전에 현재 브랜치를 rebase를 하기 위해서는 두 가지 방법을 사용할 수 있습니다.")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("pull과 함께 reabase를 하는 방법")]),a("br"),t._v("\n현재 작업중인 브랜치를 기준으로 진행 할수 있습니다.\n현재 작업중인 브랜치를 pull 받아온 브랜치의 최신 커밋으로 rebase를 하는 방법입니다.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("rebase를 진행할 브랜치로 변경합니다. (작업중인 브랜치)")])])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout feature/dosomething\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("최신 버전의 dev에 rebase와 함께 pull을 실행합니다.")])])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  $ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("feature/dosomething"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--rebase")]),t._v(" dev\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[a("strong",[t._v("conflict가 있는경우 conflict 내용을 수정하고 "),a("code",[t._v("--continue")]),t._v(" 합니다.")])])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# conflict 수정후 stage에 추가해야 합니다!")]),t._v("\n  $ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("feature/dosomething"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("dev -i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--continue")]),t._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[a("strong",[t._v("PR을 요청합니다. (기존에 PR이 있다면 forece push를 통해 commit log를 변경할 수 있습니다)")])])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  $ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("feature/dosomething"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin feature/dosomething "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v("\n")])])]),a("blockquote",[a("p",[a("em",[t._v("foreced push는 해당 브랜치의 전체 커밋로그를 변경하는 과정을 진행하기 때문에, 진행하기전에 주의가 필요합니다.")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("일반적인 rebase를 진행하는 방법")]),a("br"),t._v("\ngit의 rebase를 사용하는 일반적인 방법을 사용 할수 있습니다.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  $ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase dev feature/dosomething\n")])])]),a("p",[t._v("해당 방법은 git rebase를 명령어 사용 방법을 통해 자세히 살펴볼 수 있습니다.")])])]),t._v(" "),a("h2",{attrs:{id:"conclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[t._v("#")]),t._v(" Conclusion")]),t._v(" "),a("p",[t._v("현재 저희 팀(JS)은 아직 배포 전략이 정해져 있지않아, dev까지만 branch를 관리하고 있습니다.\n개발 과정에서의 commit을 조금 더 효율적으로 관리하고, 이후 release 버전과의 관계를 파악하기 쉽도록 commit을 관리하기 위한 전략을 찾던 중 배민에서 사용하는 git-flow 전략을 차용하게 되었고")]),t._v(" "),a("p",[t._v("저희가 사용하는 git관리 convetion과 혼용하여 사용하고 있습니다.\nconvetion은 commit message, issue managing등을 적용하였고 git-flow는 merge된 commit을 확인하는 과정에서 가독성, 가시성이 많이 좋아져 만족하고 있습니다.")])])}),[],!1,null,null,null);a.default=r.exports}}]);